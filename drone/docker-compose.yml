version: "3"

networks:
  default:
    external: true
    name: ${TRAEFIK_NETWORK_NAME}

volumes:
  drone:
    driver: local

services:
  drone:
    image: drone/drone:latest
    restart: always
    environment:
      - DRONE_GITEA_SERVER=http://${GITEA_HOST}
      - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}
      - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_SERVER_HOST=${DRONE_HOST}
      - DRONE_SERVER_PROTO=http
      - DRONE_USER_CREATE=username:${DRONE_ADMIN_USER_NAME},admin:true
    labels:
      - traefik.enable=true
      - traefik.docker.network=${TRAEFIK_NETWORK_NAME}
      - traefik.http.routers.drone-router.rule=Host(`${DRONE_HOST}`)
      - traefik.http.routers.drone-router.entrypoints=web
      - traefik.http.routers.drone-router.service=drone-service
      - traefik.http.services.drone-service.loadbalancer.server.port=80
    networks:
      default:
        aliases:
          - ${DRONE_HOST}
    volumes:
      - "drone:/data"

  runner:
    image: drone/drone-runner-docker:1
    restart: always
    depends_on:
      - drone
    environment:
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=${DRONE_HOST}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_NETWORKS=${TRAEFIK_NETWORK_NAME}
      - DRONE_UI_USERNAME=${DRONE_UI_USERNAME}
      - DRONE_UI_PASSWORD=${DRONE_UI_PASSWORD}
      - DRONE_RUNNER_NAME=${DRONE_RUNNER_NAME}
      - DRONE_TRACE=true
    networks:
      - default
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
